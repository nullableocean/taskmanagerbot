version: '3.9'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - appnet

  app:
    build:
      context: .
      dockerfile: Dockerfile.main
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - appnet

  adminer:
    image: adminer
    restart: always
    ports:
      - 127.0.0.1:8097:8080
    networks:
      - appnet

  postgres:
    image: postgres:18.0
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${PG_PORT}:5432"
    volumes:
      - botpgdata:/var/lib/postgresql/18/docker
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=10
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d bottask" ]
      interval: 10s
      timeout: 3s
      retries: 3
    tty: true
    stdin_open: true
    networks:
      - appnet

volumes:
  botpgdata:

networks:
  appnet:
    driver: bridge